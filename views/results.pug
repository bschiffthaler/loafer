extends layout

block content
    h1 Results
    button.btn.btn-primary(onclick="location.href='/';") Go again
    #modal.modal(role='dialog', tabindex=-1)
        .modal-dialog.modal-lg(role='document')
            .modal-content
                .modal-header
                    h5 Gene list
                    button.close(type='button', data-dismiss='modal')
                        span &times;
                .modal-body
                    textarea#modal-input.form-control(type='textarea', readonly)
                .modal-footer        
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Close
    br
    br
    #errmsg.alert.alert-danger(hidden)
    br
    h2.lead Click on any of the tabs to view Gofer2's results
    hr
    .container-fluid
        p Filters (apply to all tables)
        .form-inline
            .form-group
                input.form-control#min-nt(type='number', placeholder='Min nt')
                input.form-control#max-nt(type='number', placeholder='Max nt')
                input.form-control#min-padj(type='number', placeholder='Min Padj')
                input.form-control#max-padj(type='number', placeholder='Max Padj')    
        hr
        ul#nav.nav.nav-tabs
        div#content.tab-content

    script.
        let request = !{JSON.stringify(goferReq)};

        function renderNum(data, type, row) {
            if (data < 0.001) {
                return data.toExponential(3);
            } else {
                return data.toFixed(3);
            }
        }

        function renderNt(data, type, row) {   
            return '<a data-stype="nt" href=# class="data-modal">' + data + '</a>'
        }

        function renderMt(data, type, row) {   
            return '<a data-stype="mt" href=# class="data-modal">' + data + '</a>'
        }

        function renderN(data, type, row) {   
            return '<a data-stype="n" href=# class="data-modal">' + data + '</a>'
        }

        function renderM(data, type, row) {   
            return '<a data-stype="m" href=# class="data-modal">' + data + '</a>'
        }

        function renderNpat(data, type, row) {   
            return '<a data-stype="npat" href=# class="data-modal">' + data + '</a>'
        }

        function renderMpat(data, type, row) {   
            return '<a data-stype="mpat" href=# class="data-modal">' + data + '</a>'
        }

        function typeToCols(type) {
            if (type === 'fisher') {
                return ([
                    {data: 'id'},
                    {data: 'name'},
                    {
                        data: 'm',
                        render: renderM
                    },
                    {
                        data: 'mt',
                        render: renderMt
                    },
                    {
                        data: 'n',
                        render: renderN
                    },
                    {
                        data: 'nt',
                        render: renderNt
                    },
                    {
                        data: 'pval',
                        render: renderNum
                    },
                    {
                        data: 'padj',
                        render: renderNum
                    }
                ]);
            } else {
                return ([
                    {data: 'id'},
                    {data: 'name'},
                    {
                        data: 'mpat',
                        render: renderMpat
                    },
                    {
                        data: 'mt',
                        render: renderMt
                    },
                    {
                        data: 'npat',
                        render: renderNpat
                    },
                    {
                        data: 'nt',
                        render: renderNt
                    },
                    {
                        data: 'pval',
                        render: renderNum
                    },
                    {
                        data: 'padj',
                        render: renderNum
                    }
                ]);
            }
        };

        $.fn.dataTable.ext.search.push(
            function( settings, data, dataIndex ) {
                var minnt = parseInt( $('#min-nt').val(), 10 );
                var maxnt = parseInt( $('#max-nt').val(), 10 );
                var nt = parseFloat( data[5] ) || 0;
         
                if ( ( isNaN( minnt ) && isNaN( maxnt ) ) ||
                     ( isNaN( minnt ) && nt <= maxnt ) ||
                     ( minnt <= nt   && isNaN( maxnt ) ) ||
                     ( minnt <= nt   && nt <= maxnt ) ) 
                {
                    return true;
                }

                return false;
            }
        );

        $.fn.dataTable.ext.search.push(
            function( settings, data, dataIndex ) {
                var minpadj = parseFloat( $('#min-padj').val());
                var maxpadj = parseFloat( $('#max-padj').val());
                var padj = parseFloat( data[7] ) || 0;

                if ( ( isNaN( minpadj ) && isNaN( maxpadj ) ) ||
                     ( isNaN( minpadj ) && padj <= maxpadj ) ||
                     ( minpadj <= padj && isNaN( maxpadj ) ) ||
                     ( minpadj <= padj && padj <= maxpadj ) ) 
                {
                    return true;
                }

                return false;
            }
        );

        $(document).ready(function() {

            for (var i = 0; i < request.body.target.length; i++) {

                var key = request.body.target[i];

                // Add item in the navigator 
                $("#nav").append("<li class='nav-item'><a class='nav-link' data-toggle='tab' href='#" + key + "'>" + key + "</a></li>");

                // Add content div to be triggered by the nav
                $("#content").append("<div class='tab-pane container-fluid' id=" +
                key + "><br/><br/></div");

                // Add a table to the content
                $("#" + key).append("<table class='table' id='" + key + "-tab" + 
                "'></table>");

                // Add table header and body to the content
                $("#" + key + "-tab").append("<thead><tr id='" + key + "-thead" + "'></tr></thead><tbody></tbody>");

                let cp = JSON.parse(JSON.stringify(request.body));
                cp.target = [cp.target[i]];

                let cols = typeToCols(request.cols[cp.target[0]]);

                for (var k in cols) {
                    $("#" + key + "-thead").append("<th>" + cols[k].data + "</th>");
                }

                //console.log(cp);
                let tx = $("#" + key + '-tab').DataTable({
                    processing: false,
                    serverSide: false,
                    order: [[7, "asc"]],
                    dom: 'Bfrtip',
                    buttons: [
                        'copy', 'csv', 'excel', 'print'
                    ],
                    initComplete: function() {
                        $('.data-modal').click(function(){
                            let term = $($(this).parent().parent().children()[0]).text();
                            let target = $($(this).parents()[5]).attr('id');
                            let r = {
                                    "target": target,
                                    "term": term,
                                    "genes": request.body.genes
                            };
                            let stype = $(this).attr('data-stype');
                            $.ajax({
                                type: "POST",
                                url: request.url.replace('enrichment', 'get-sets'),
                                data: JSON.stringify(r),
                                headers: {
                                    'content-type': 'application/json'
                                },
                                success: function(data) {
                                    $('#modal-input')
                                    .val(data[term].sets[stype].join(', '));
                                    $('#modal').modal();
                                },
                                dataType: "json"
                            });
                        });
                    },
                    ajax: {
                        url: request.url,
                        method: 'POST',
                        data: function (d) {
                            return JSON.stringify(cp);
                        },
                        dataSrc: function (d) {
                            return d[cp.target[0]];
                        },

                        dataType: 'json',
                        headers: {
                            'content-type': 'application/json'
                        }
                    },
                    columns: cols
                });

                $($($("#nav").children()[0]).children()[0]).click();

                $('#min-nt, #max-nt, #min-padj, #max-padj').keyup( function() {
                    tx.draw();
                } );
            }

        });


